using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.IO;

public static class Plist
{
    #region Public Functions

    public static string readStringFromXmlFile(string file)
    {
        return Plist.readDictionaryString((Dictionary<string, object>)Plist.readPlistFromXmlFile(file), 0);
    }

    public static string readStringFromXmlFile(Dictionary<string, object> dictionary)
    {
        return Plist.readDictionaryString(dictionary, 0);
    }

    public static object readPlistFromXmlFile(string path)
    {
        XmlDocument doc = new XmlDocument();
        doc.Load(path);
        return readPlistFromXmlDocument(doc);
    }

    public static object readPlistFromXmlString(string plist)
    {
        XmlDocument doc = new XmlDocument();
        doc.LoadXml(plist);
        return readPlistFromXmlDocument(doc);
    }

    public static object readPlistFromXmlDocument(XmlDocument doc)
    {
        XmlNode rootNode = doc.DocumentElement.ChildNodes[0];
        //	if(rootNode.Name != "dict")
        //	  throw new ApplicationException("Sorry, only dictionary plists supported.");

        return parse(rootNode);
    }

    public static string writeXmlFromDictionary(Dictionary<string, object> dictionary)
    {
        TextWriter stringWriter = new StringWriter();
        writeXmlFromDictionary(dictionary, stringWriter);
        return stringWriter.ToString();
    }

    public static void writeXmlFromDictionary(Dictionary<string, object> dictionary, string filename)
    {
        TextWriter fileWriter = new StreamWriter(filename);
        writeXmlFromDictionary(dictionary, fileWriter);
    }   

    public static void writeXmlFromDictionary(Dictionary<string, object> dictionary, TextWriter textWriter)
    {
        XmlTextWriter writer = new XmlTextWriter(textWriter);
        writer.Formatting = Formatting.Indented;
        writer.WriteStartDocument();
        writer.WriteComment("DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" " + "\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"");
        writer.WriteStartElement("plist");
        writer.WriteAttributeString("version", "1.0");
        writeDictionaryValues(dictionary, writer);
        writer.WriteEndElement();
        writer.WriteEndDocument();
        writer.Close();
    }

    public static void writeBinaryFromPlistFile(string path, string destination)
    {
        Dictionary<string,object> dictionary = (Dictionary<string,object>)readPlistFromXmlFile(path);
        writeBinaryFromDictionary(dictionary, destination);
    }

    public static void writeBinaryFromPlistString(string plist, string destination)
    {
        Dictionary<string, object> dictionary = (Dictionary<string, object>)readPlistFromXmlString(plist);
        writeBinaryFromDictionary(dictionary, destination);
    }

    public static void writeBinaryFromDictionary(Dictionary<string, object> dictionary, string path)
    {
        BinaryWriter writer = new BinaryWriter(File.Open(path,FileMode.OpenOrCreate));

        string header = "bplist00";

        byte[] bytes = new byte[header.Count()];

        for(int i = 0; i < header.Count(); i++)
        {
            bytes[i] = Convert.ToByte(header[i]);
        }

        writer.BaseStream.Write(bytes, 0, header.Count());

        writeBinaryPlist(dictionary, writer);

        writer.Close();
    }

    #endregion

    #region Private Functions

    private static Dictionary<string, object> parseDictionary(XmlNode node)
    {
        XmlNodeList children = node.ChildNodes;
        if (children.Count % 2 != 0)
        {
            throw new DataMisalignedException("Dictionary elements must have an even number of child nodes");
        }

        Dictionary<string, object> dict = new Dictionary<string, object>();

        for (int i = 0; i < children.Count; i += 2)
        {
            XmlNode keynode = children[i];
            XmlNode valnode = children[i + 1];

            if (keynode.Name != "key")
            {
                throw new ApplicationException("expected a key node");
            }

            object result = parse(valnode);

            if (result != null)
            {
                dict.Add(keynode.InnerText, result);
            }
        }

        return dict;
    }

    private static List<object> parseArray(XmlNode node)
    {
        List<object> array = new List<object>();

        foreach (XmlNode child in node.ChildNodes)
        {
            object result = parse(child);
            if (result != null)
            {
                array.Add(result);
            }
        }

        return array;
    }

    private static void composeArray(List<object> value, XmlTextWriter writer)
    {
        writer.WriteStartElement("array");
        foreach (object obj in value)
        {
            compose(obj, writer);
        }
        writer.WriteEndElement();
    }

    private static object parse(XmlNode node)
    {
        switch (node.Name)
        {
            case "dict":
                return parseDictionary(node);
            case "array":
                return parseArray(node);
            case "string":
                return node.InnerText;
            case "integer":
                return Convert.ToInt32(node.InnerText);
            case "real":
                return Convert.ToDouble(node.InnerText);
            case "false":
                return false;
            case "true":
                return true;
            case "data":
                return Convert.FromBase64String(node.InnerText);
        }

        throw new ApplicationException(String.Format("Plist Node `{0}' is not supported", node.Name));
    }

    private static void compose(object value, XmlTextWriter writer)
    {
        switch (value.GetType().ToString())
        {
            case "System.Collections.Generic.Dictionary`2[System.String,System.Object]":
                writeDictionaryValues((Dictionary<string, object>)value, writer);
                break;

            case "System.Collections.Generic.List`1[System.Object]":
                composeArray((List<object>)value, writer);
                break;

            case "System.Byte[]":
                writer.WriteElementString("data", Convert.ToBase64String((Byte[])value));
                break;

            case "System.Double":
                writer.WriteElementString("real", value.ToString());
                break;

            case "System.Int32":
                writer.WriteElementString("integer", value.ToString());
                break;

            case "System.String":
                writer.WriteElementString("string", value.ToString());
                break;

            default:
                throw new Exception(String.Format("Value type '{0}' is unhandled", value.GetType().ToString()));
        }
    }

    private static void writeDictionaryValues(Dictionary<string, object> dictionary, XmlTextWriter writer)
    {
        writer.WriteStartElement("dict");
        foreach (string key in dictionary.Keys)
        {
            object value = dictionary[key];
            writer.WriteElementString("key", key);
            compose(value, writer);
        }
        writer.WriteEndElement();
    }

    private static void writeBinaryPlist(Dictionary<string, object> dictionary, BinaryWriter writer)
    {
        if (dictionary.Count <= 15)
        {
            writer.Write(0xD0 | (byte)dictionary.Count);
        }
        else
        {
            writer.Write(0xD0 | 0xf);
            writer.Write(dictionary.Count);
        }
        for (int i = dictionary.Keys.Count; i > 0; i--)
        {
            composeBinary(dictionary.Keys.ToArray()[i - 1], writer);
        }
        for (int i = dictionary.Keys.Count; i > 0; i--)
        {
            composeBinary(dictionary.Values.ToArray()[i-1], writer);
        }
    }

    private static void composeBinary(object obj, BinaryWriter writer)
    {
        switch (obj.GetType().ToString())
        {
            case "System.Collections.Generic.Dictionary`2[System.String,System.Object]":
                writeBinaryPlist((Dictionary<string, object>)obj, writer);
                break;
                
            case "System.Collections.Generic.List`1[System.Object]":
                composeBinaryArray((List<object>)obj, writer);
                break;

            case "System.Byte[]":
                foreach (byte byt in (byte[])obj)
                {
                    writer.BaseStream.WriteByte(byt);
                }
                break;

            case "System.Double":
                writer.Write((double)obj);
                break;

            case "System.Int32":
                writer.Write((int)obj);
                break;

            case "System.String":
                if (obj.ToString().Length <= 15)
                {
                    writer.Write(0x50 | obj.ToString().Length);
                }
                else
                {
                    writer.Write(0x50 | 0xf);
                    writer.Write(obj.ToString().Length);
                }
                writer.Write(obj.ToString());
                break;
        }
        
    }

    private static void composeBinaryArray(List<object> objects, BinaryWriter writer)
    {
        if (objects.Count <= 15)
        {
            writer.Write(0xA | objects.Count);
        }
        else
        {
            writer.Write(0xA | 0xf);
            writer.Write(objects.Count);
        }
        foreach (object obj in objects)
        {
            composeBinary(obj, writer);
        }
    }

    private static string readDictionaryString(Dictionary<string, object> plistDict, int tab)
    {
        string outputValue = "";
        foreach (string key in plistDict.Keys)
        {
            object currentValue = plistDict[key];
            switch (currentValue.GetType().ToString())
            {
                case "System.Collections.Generic.List`1[System.Object]":
                    {
                        List<object> value = (List<object>)currentValue;
                        outputValue += printTab(tab) + key + " = ";
                        for (int ii = 0; ii < value.Count; ii++)
                        {
                            outputValue += value[ii].ToString();
                            if (ii != value.Count - 1)
                                outputValue += ", ";
                        }
                        outputValue += "\n";
                        break;
                    }
                case "System.Byte[]":
                    {/*
                        Byte[] value = (Byte[])currentValue;
                        outputValue += printTab(tab) + key + " = \n";
                        for (int ii = 0; ii < value.Count(); ii++)
                        {
                            outputValue += value[ii].ToString();
                        }
                        outputValue += "\n";*/
                        outputValue += "Byte Data\n";
                        break;
                    }
                case "System.Collections.Generic.Dictionary`2[System.String,System.Object]":
                    {
                        outputValue += "\n\n" + printTab(tab) + key + ": \n" + readDictionaryString((Dictionary<string, object>)currentValue, tab + 5);
                        break;
                    }
                default:
                    {
                        outputValue += printTab(tab) + key + " = " + currentValue.ToString();
                        outputValue += "\n";
                        break;
                    }
            }
        }
        return outputValue;
    }

    private static string printTab(int tab)
    {
        string spaces = "";
        for (int i = 0; i < tab; i++)
        {
            spaces += " ";
        }
        return spaces;
    }

    #endregion
}



